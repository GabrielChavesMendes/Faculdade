// Guia_1601.txt
// 80338 - Fernando Theodoro Porto de Paula Dias
//
// Multiplication of two 8-bit numbers
// dado03 = dado01 * dado02
// Result is stored at memory location 0052h (low byte) and 0053h (high byte)

JMP MAIN // Pular para o início do programa

// Função IMUL: Multiplica dois números usando somas sucessivas
F_IMUL: POP H           // Salvar endereço de retorno
POP D           // Pegar os parâmetros (B = multiplicador, C = multiplicando)
LXI H,0000      // Inicializar o acumulador do resultado em 16 bits (HL = 0)
MVI A,00        // Inicializar temporário
MOV B,E         // Mover multiplicador para B
LOOP_IMUL: MOV A,C       // Copiar multiplicando para A
ADD L           // Adicionar parte baixa ao acumulador
MOV L,A         // Atualizar parte baixa do resultado
MOV A,H         // Parte alta do acumulador
ADC D           // Adicionar com carry a parte alta
MOV H,A         // Atualizar parte alta do acumulador
DCR B           // Decrementar multiplicador
JNZ LOOP_IMUL   // Repetir até B = 0
PUSH H          // Restaurar endereço de retorno
RET             // Retornar com o resultado em HL

// Main program
MAIN: LXI H,0050 // Carregar endereço base (dados)
MOV B,M         // B = dado01
INX H           // Avançar para próximo dado
MOV C,M         // C = dado02
PUSH B          // Empilhar multiplicador
PUSH C          // Empilhar multiplicando
CALL F_IMUL     // Chamar função IMUL
MOV A,L         // Copiar parte baixa do resultado
STA 0052        // Armazenar em 0052h
MOV A,H         // Copiar parte alta do resultado
STA 0053        // Armazenar em 0053h
HLT             // Encerrar

// Área de dados
// dado01: 03h ; Primeiro número
// dado02: 02h ; Segundo número
// resultado: 0006h ; Produto esperado
