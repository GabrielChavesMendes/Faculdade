// Guia_1603.txt
// 803338- Fernando Theodoro Porto de Paula Dias
//
// Integer modulo of two 8-bit numbers
// dado03 = dado01 % dado02
// Result (remainder) is stored at memory location 0052h

JMP MAIN // Pular para o início do programa

// Função IMOD: Calcula o resto usando subtrações sucessivas
F_IMOD: POP H           // Salvar endereço de retorno
POP D           // Pegar os parâmetros (B = dividendo, C = divisor)
MOV L,B         // Copiar dividendo para o resto inicial
MOD_LOOP: CMP C // Comparar resto com divisor
JC END_MOD      // Se resto < divisor, terminar
SUB C           // Subtrair divisor do resto
MOV L,A         // Atualizar resto
JMP MOD_LOOP    // Repetir

END_MOD: PUSH H // Restaurar endereço de retorno
RET             // Retornar com o resto em L

// Main program
MAIN: LXI H,0050 // Carregar endereço base (dados)
MOV B,M         // B = dado01 (dividendo)
INX H           // Avançar para próximo dado
MOV C,M         // C = dado02 (divisor)
PUSH B          // Empilhar dividendo
PUSH C          // Empilhar divisor
CALL F_IMOD     // Chamar função IMOD
MOV A,L         // Copiar resto
STA 0052        // Armazenar resto em 0052h
HLT             // Encerrar

// Área de dados
// dado01: 08h ; Dividendo
// dado02: 03h ; Divisor
// resultado: resto = 02h
